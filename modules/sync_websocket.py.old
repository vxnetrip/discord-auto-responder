import time
import json
import websockets
import os
import re
import base64
import random
import tls_client
from datetime import datetime
from threading import Thread
from typing import List, Union, Dict, Tuple, Optional
from enum import Enum, IntEnum
from colorama import init as clinit
from websockets.exceptions import ConnectionClosedError
from websockets.sync.client import connect
from websockets.sync.connection import Connection

if __name__ == "__main__":
    from current_state import State_AutoResponder
else:
    from .current_state import State_AutoResponder

clinit(autoreset=True)

config_default = json.loads(open("./DARconfig/config.json", "r+").read())
config = json.loads(open("./DARconfig/presence.config.json", "r+").read())



class Status(Enum):
    "More information at https://discord.com/developers/docs/topics/gateway-events#activity-object-activity-types"
    ONLINE = "online"  # Online
    DND = "dnd"  # Do Not Disturb
    IDLE = "idle"  # AFK
    INVISIBLE = "invisible"  # Invisible and shown as offline
    OFFLINE = "offline"  # Offline

class Activity(Enum):
    "More information at https://discord.com/developers/docs/topics/gateway-events#activity-object"
    GAME = 0  #   Playing {name}
    STREAMING = 1  #   Streaming {details}
    LISTENING = 2  #   Listening to {name}
    WATCHING = 3  #   Watching {name}
    CUSTOM = 4  #   {emoji} {state} am cool
    COMPETING = 5  #   Competing in {name} World Champions

class OPCodes(Enum):
    "More information at https://discord.com/developers/docs/topics/opcodes-and-status-codes#opcodes-and-status-codes"
    Dispatch = 0  # An event was dispatched.
    Heartbeat = 1  # Fired periodically by the client to keep the connection alive.
    Identify = 2  # Starts a new session during the initial handshake.
    PresenceUpdate = 3  # Update the client's presence.
    VoiceStateUpdate = 4  # Used to join/leave or move between voice channels.
    Resume = 6  # Resume a previous session that was disconnected.
    Reconnect = 7  # You should attempt to reconnect and resume immediately.
    RequestGuildMembers = (
        8  # Request information about offline guild members in a large guild.
    )
    InvalidSession = 9  # The session has been invalidated. You should reconnect and identify/resume accordingly.
    Hello = (
        10  # Sent immediately after connecting, contains the heartbeat_interval to use.
    )
    HeartbeatACK = 11  # Sent in response to receiving a heartbeat to acknowledge that it has been received.
    RequestSoundboardSounds = 31 # 	Request information about soundboard sounds in a set of guilds.

class DiscordIntents(IntEnum):
    "More information at https://discord.com/developers/docs/topics/gateway#gateway-intents"
    GUILDS = 1 << 0
    GUILD_MEMBERS = 1 << 1
    GUILD_MODERATION = 1 << 2
    GUILD_EMOJIS_AND_STICKERS = 1 << 3
    GUILD_INTEGRATIONS = 1 << 4
    GUILD_WEBHOOKS = 1 << 5
    GUILD_INVITES = 1 << 6
    GUILD_VOICE_STATES = 1 << 7
    GUILD_PRESENCES = 1 << 8
    GUILD_MESSAGES = 1 << 9
    GUILD_MESSAGE_REACTIONS = 1 << 10
    GUILD_MESSAGE_TYPING = 1 << 11
    DIRECT_MESSAGES = 1 << 12
    DIRECT_MESSAGE_REACTIONS = 1 << 13
    DIRECT_MESSAGE_TYPING = 1 << 14
    MESSAGE_CONTENT = 1 << 15
    GUILD_SCHEDULED_EVENTS = 1 << 16
    AUTO_MODERATION_CONFIGURATION = 1 << 20
    AUTO_MODERATION_EXECUTION = 1 << 21


class Presence:
    """
    This class is used to manage the presence of a user on Discord.
    It allows you to set the user's online status and activities,
    which are displayed on the user's profile.

    Parameters:
    -----------
    online_status: Status
        An enum value representing the user's online status. This can be one of the predefined Status types, such as Online, Do Not Disturb, Away, Invisible, or Offline.

    Attributes:
    -----------
    online_status: Status
        The current online status of the user.
    activities: List[Activity]
        A list of activities that the user is currently engaged in. Each activity is represented by an Activity object, which contains information such as the name of the activity, its type, and any relevant URLs.

    Methods:
    --------
    addActivity(name: str, activity_type: Activity, url: Optional[str]) -> int
        Adds a new activity to the user's presence. Returns the index of the newly added activity.
    removeActivity(index: int) -> bool
        Removes an activity from the user's presence. Returns True if the activity was removed, False if the index was out of range.
    """

    def __init__(self, online_status: Status) -> None:
        self.online_status: Status = online_status
        self.activities: List[Activity] = []

    def addActivity(
        self, name: str, activity_type: Activity, url: Optional[str]
    ) -> int:
        """
        Adds a new activity to the user's current presence in Discord.

        Parameters:
        ----------
        name : str
            The displayed name of the activity. This could also be the name of a game
        activity_type : Activity
            An enum value representing the type of activity. This should be one of the predefined Activity types, such as Playing, Streaming, Listening, etc.
        url : Optional[str]
            The URL associated with the activity. This is particularly relevant if the activity_type is Streaming, in which case this URL should be the link to the stream.

        Returns:
        -------
        int
            The index of the newly added activity in the activities list, which can be used to reference or modify the activity later.

        Example:
        -------
        >>> addActivity("Playing Chess", Activity.Playing)
        >>> addActivity("Streaming Art", Activity.Streaming, "http://twitch.tv/example_stream")

        Note:
        ----
        The URL parameter is only used if the activity_type is Streaming; for other activity types, the URL is ignored and can be omitted.

        """

        self.activities.append(
            {
                "name": name,
                "type": activity_type.value,  # The enum value of the activity type
                "url": url if activity_type == Activity.STREAMING else None,
            }
        )
        return len(self.activities) - 1


    def removeActivity(self, index: int) -> bool:
        """
        Removes an activity to the user's current presence in Discord.

        Parameters
        ----------
        index : int
            The index of the activity to remove.

        Returns
        -------
        bool
            ``True`` if the activity was removed, ``False`` if the index was out of range.

        Example
        -------
        >>> removeActivity(0)
        >>> removeActivity(2)

        """

        if index < 0 or index >= len(self.activities):
            return False
        self.activities.pop(index)
        return True

class DiscordAPI:
    def __init__(self, token: str):
        self.token = token
        self.session = tls_client.Session(
            client_identifier="chrome_131"
        )

        self.buildnumb = self.get_build_number() # one time call then auto update
        self.update_discord_cookies() # one time call then auto update

        # self.run_build_number_updater() # type: UPDATE AFTER TIME
        # self.run_cookie_updater() # type: UPDATER AFTER TIME


    # fetch build number
    def get_build_number(self):
        headers = {
            "Accept": "*/*",
            "Accept-Language": "en-GB,en-US;q=0.9,en;q=0.8",
            "Cache-Control": "no-cache",
            "Pragma": "no-cache",
            "Referer": "https://discord.com/login",
            "Sec-Ch-Ua": '"Chromium";v="124", "Google Chrome";v="124", "Not-A.Brand";v="99"',
            "Sec-Ch-Ua-Mobile": "?0",
            "Sec-Ch-Ua-Platform": '"macOS"',
            "Sec-Fetch-Dest": "script",
            "Sec-Fetch-Mode": "no-cors",
            "Sec-Fetch-Site": "same-origin",
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36",
        }

        def _extract_asset_files():
            request = self.session.get("https://discord.com/login", headers=headers)
            pattern = r'<script\s+src="([^"]+\.js)"\s+defer>\s*</script>'
            matches = re.findall(pattern, request.text)
            return matches
        
        try:
            files = _extract_asset_files()
            for file in files:
                build_url = f"https://discord.com{file}"
                response = self.session.get(build_url, headers=headers)
                if "buildNumber" not in response.text:
                    continue
                else:
                    build_number = response.text.split('build_number:"')[1].split('"')[0]
                    break

            self.session.close()
            return build_number
        except Exception as e:
            print(f"Failed to get latest build number, please contact support: {e}")

    # update cookie after time
    def update_discord_cookies(self) -> None:
        headers = {
            'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8',
            'accept-language': 'en-US,en;q=0.9',
            'cache-control': 'no-cache',
            'pragma': 'no-cache',
            'priority': 'u=0, i',
            'sec-ch-ua': '"Brave";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Linux"',
            'sec-fetch-dest': 'document',
            'sec-fetch-mode': 'navigate',
            'sec-fetch-site': 'none',
            'sec-fetch-user': '?1',
            'sec-gpc': '1',
            'upgrade-insecure-requests': '1',
            'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
        }
        response = self.session.get('https://discord.com/', headers=headers)
        self.session.cookies.update(response.cookies)



    def nonce(self):
        date = datetime.now()
        unixtx = time.mktime(date.timetuple())
        return str((int(unixtx)) * 1000 - 1420070400000)
    

    # Valid properties :)
    def build_x_super_properties(self):
        props_str = f'{{"os":"Linux","browser":"Chrome","device":"","system_locale":"en-US","browser_user_agent":"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36","browser_version":"131.0.0.0","os_version":"","referrer":"","referring_domain":"","referrer_current":"","referring_domain_current":"","release_channel":"stable","client_build_number":{self.buildnumb},"client_event_source":null,"has_client_mods":false}}'
        props_bytes = props_str.encode()
        props_encrypted = base64.b64encode(props_bytes)
        return props_encrypted.decode()

        


    def send_message(self, channel_id: int | str, content: str):
        URL = f"https://discord.com/api/v9/channels/{channel_id}/messages"

        self.session.headers = {
            'accept': '*/*',
            'accept-language': 'en-US,en;q=0.9',
            'authorization': self.token,
            'cache-control': 'no-cache',
            'content-type': 'application/json',
            # 'cookie': '__dcfduid=d2e8f8607ead11efa6123b2bd7f0689a; __sdcfduid=d2e8f8617ead11efa6123b2bd7f0689ae0c36f53d3c43577938cf0bb76d1ca3ad333363fd380d1a6365aa5dcb7f19e46; _ga=GA1.1.652577490.1735061953; __cfruid=640287eac731b16bc1755b93a7fc2eadd9d2b363-1735135166; _cfuvid=BaCt49iqc3UpjKuerqbFzTh_JsJeiiFSMppZQBz4hdw-1735135166106-0.0.1.1-604800000; _ga_5CWMJQ1S0X=GS1.1.1735135166.3.1.1735135248.0.0.0; locale=en-US; OptanonConsent=isIABGlobal=false&datestamp=Wed+Dec+25+2024+16%3A02%3A57+GMT%2B0100+(Central+European+Standard+Time)&version=6.33.0&hosts=&landingPath=https%3A%2F%2Fdiscord.com%2F&groups=C0001%3A1%2CC0002%3A0%2CC0003%3A0; cf_clearance=jc3AmiJpyJLMjAjixgF2lzM63qT67r4SGbNHoxTbuZU-1735138979-1.2.1.1-2J1rOLaZcHz8IN2hB4bCLIvKNaKMcuQCv5jn5wKEFGLgIP0E74B7_A_LASa_edrc83aVI.fBrZqC1Ik9wxoEDgGQh1pfphcM0_CF7BLqdxJu73crHnDxASQDkmOd8a1T4p6Wb0fr5687lvawG5pZQTuKIlQY9RfFMV.9Bg_NTG0HDRq1jHYUYW_8MbR5aNJFxK93tf2wFSi3z8iutjU3eub59U0ipJzLw0WPcYoZF28yMB2wNxCTzonq9fqBoz6vbqHNYyLBGp3ZcKqtrBtZ5B0nsxr_R1ENX0jRq.UPHXi_cta56F1hlseU4lVexhcz2OgOeGnFJ9qIpRACUGJ8gKY6lQUQ_1yAFWomE1bR9vZ3uG.VWTpAJEZSyi2b3C_j',
            'origin': 'https://discord.com',
            'pragma': 'no-cache',
            'priority': 'u=1, i',
            'referer': f'https://discord.com/channels/@me/{channel_id}',
            'sec-ch-ua': '"Brave";v="131", "Chromium";v="131", "Not_A Brand";v="24"',
            'sec-ch-ua-mobile': '?0',
            'sec-ch-ua-platform': '"Linux"',
            'sec-fetch-dest': 'empty',
            'sec-fetch-mode': 'cors',
            'sec-fetch-site': 'same-origin',
            'sec-gpc': '1',
            'user-agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36',
            'x-debug-options': 'bugReporterEnabled',
            'x-discord-locale': 'en-US',
            'x-discord-timezone': 'Europe/Warsaw',
            'x-super-properties': self.build_x_super_properties(),
        }           
        
        payload = {
            "mobile_network_type":"unknown",
            "content":content,
            "nonce":self.nonce(),
            "tts":False,
            "flags":0
        }
        try:
            response = self.session.post(
                URL,
                json=payload
            )

            match response.status_code:
                case 200:
                    print(f"Sent content of length {len(content)} to channel: {channel_id}")
                case _:
                    print(f"Failed to send message please contact support. Response from discord: {response.text}")
        except Exception as e:
            print(f"An error occured please contact support. | Exception: {e}")


    
class DiscordWebSocket:
    """
    This class is used to manage the connection to the Discord WebSocket.

    Parameters:
    -----------
    None

    Attributes:
    -----------
    websocket_instance: websocket.WebSocketClientProtocol
        The WebSocket connection to the Discord server.
    heartbeat_counter: int
        The number of heartbeats sent since connecting.
    username: str
        The username of the authenticated user.
    required_action: int
        The required action to take after attempting to authenticate.
    heartbeat_interval: int
        The interval between heartbeats, in milliseconds.
    last_heartbeat: float
        The time of the last received heartbeat.

    Methods:
    --------
    get_heatbeat_interval(self) -> None
        This function is used to get the heartbeat interval from the Discord WebSocket.

    authenticate(self, token: str, rich: Presence) -> Optional[Dict]
        Authenticates the user with the Discord API using the given token.

    send_heartbeat(self) -> websockets.typing.Data
        Send a heartbeat to keep the connection alive.

    """

    def __init__(self) -> None:
        self.websocket_instance = connect(
            "wss://gateway.discord.gg/?v=10&encoding=json"
        )
        self.heartbeat_counter = 0

        self.username: str = None
        self.required_action: str = None
        self.heartbeat_interval: int = None
        self.last_heartbeat: float = None

    def get_heatbeat_interval(self) -> None:
        """
        This function is used to get the heartbeat interval from the Discord WebSocket.

        The heartbeat interval ensures that the connection to the Discord server is maintained
        and not closed due to inactivity. It must be called periodically, as specified
        by the heartbeat interval.
        """

        resp: Dict = json.loads(self.websocket_instance.recv())
        self.heartbeat_interval = resp["d"]["heartbeat_interval"]

    def authenticate(self, token: str, rich: Presence) -> Union[Dict, bool]:
        """
        Authenticates the user with the Discord API using the given token.
        This is an [IDENTIFY payload](https://discord.com/developers/docs/topics/gateway-events#identify-identify-structure) containing a [Presence update](https://discord.com/developers/docs/topics/gateway-events#update-presence)

        Parameters:
        -----------
        token: str
            The user's Discord authentication token.
        rich: Presence
            The user's presence information, including their online status and activities.

        Returns:
        --------
        Optional[Dict]
            The response from the Discord API, or None if the authentication failed.
        """
        self.websocket_instance.send(
            json.dumps(
                {
                    "op": OPCodes.Identify.value,  # Operation code for Identify, used to authenticate the client to the server.
                    "d": {
                        "token": token,  # OAuth token used for verifying the client's identity with Discord.
                        "intents": DiscordIntents.DIRECT_MESSAGES
                                    | DiscordIntents.GUILD_MESSAGES
                                    | DiscordIntents.MESSAGE_CONTENT,  # Bitwise combination of intents specifying the types of events the client wants to receive.
                        "properties": {
                            "os": "linux",  # The operating system of the client
                            "browser": "Brave",  # The browser in which the client is running
                            "device": "Desktop",  # Type of device being used
                        },
                        "presence": {
                            "activities": [
                                activity for activity in rich.activities
                            ],  # List of activities for rich presence.
                            "status": rich.online_status.value,  # The client's online status (e.g., online, idle).
                            "since": time.time(),  # UNIX timestamp indicating when the client's status was last set.
                            "afk": False,  # Boolean flag indicating whether the client is marked as "away from keyboard" (AFK).
                        },
                    },
                }
            )
        )
        try:
            resp = json.loads(self.websocket_instance.recv())
            self.username: str = resp["d"]["user"]["username"]
            self.required_action = resp["d"].get("required_action")
            self.heartbeat_counter += 1
            self.last_heartbeat = time.time()

            return resp
        except ConnectionClosedError:
            return False

    def send_heartbeat(self) -> websockets.typing.Data:
        """
        Send a heartbeat to keep the connection alive.

        Returns:
            The response from the server.
        """
        self.websocket_instance.send(
            json.dumps(
                {
                    "op": OPCodes.Heartbeat.value, 
                    "d": None
                }
            )  # Operation code for sending a heartbeat, used to keep the connection alive.
        )

        self.heartbeat_counter += 1
        self.last_heartbeat = time.time()

        resp = self.websocket_instance.recv()
        return resp



def MainThread(token: str, activity: Presence):
    State_AutoResponder.status = "PENDING"
    socket = DiscordWebSocket()
    socket.get_heatbeat_interval()
 
    auth_resp = socket.authenticate(token, activity)
    if not auth_resp:
        print("Failed to Authenticate")
        State_AutoResponder.errors.append("Websocket authentication failed, please check your token")
        State_AutoResponder.status = "OFF [ERROR,TERMINATED]"
        State_AutoResponder.process.terminate()
        State_AutoResponder.process = None
        return

    print(f"Authenticated {socket.username} {socket.required_action}")
    State_AutoResponder.status = "OPERATING NORMALLY"

    discordapi = DiscordAPI(
        config_default['DISCORD_AUTO_RESPONDER']['token'],
    ) # Initialize discord api class

    counter_c = 0

    while True:
        try:
            State_AutoResponder.status = f"OPERATING NORMALLY C{counter_c}"
            counter_c += 1
            # Send heartbeat if necessary
            if time.time() - socket.last_heartbeat >= (socket.heartbeat_interval / 1000) - 5:
                print(
                    f"💓 Sending Heartbeat {socket.heartbeat_counter:04} {socket.username} {socket.heartbeat_interval}ms",
                )
                resp = socket.send_heartbeat()

            # Listen for incoming messages
            incoming_message = socket.websocket_instance.recv()
            event_data = json.loads(incoming_message)

            # Handle MESSAGE_CREATE events
            if event_data["op"] == OPCodes.Dispatch.value and event_data["t"] == "MESSAGE_CREATE":
                message_content = event_data["d"]["content"]
                author = event_data["d"]["author"]["username"]
                channel_id = event_data["d"]["channel_id"]

                # Only process DMs
                if "guild_id" not in event_data["d"] and author != socket.username:  # Messages without `guild_id` are DMs
                    print(f"📩 DM Reveived from {author}: {message_content} : {channel_id}")
                    print(f"🏓 Attepmting to send response message to {author}")
                    discordapi.send_message(
                        channel_id,
                        config_default['DISCORD_AUTO_RESPONDER']['responder_message']
                    )
            time.sleep(0.5)
        except ConnectionClosedError:
            State_AutoResponder.errors.append("Connection closed, error (unstable connection ?)...")
            State_AutoResponder.status = "OFF [ERROR,TERMINATED]"
            State_AutoResponder.process.terminate()
            State_AutoResponder.process = None
            break
        except Exception as e:
            State_AutoResponder.errors.append(f"Unexpected error: {e}")
            State_AutoResponder.status = "OFF [ERROR,TERMINATED]"
            State_AutoResponder.process.terminate()
            State_AutoResponder.process = None



# dwc = DiscordWebsocketConnnection("MTMyMDc2OTkxNjgzNTQ2MzI1OQ.GXTkSm.kdv4rhLgqDp03pBGDjMOde69Vk-fgeilkExxL0")

def discord_auto_responder():
    State_AutoResponder.status = "LOADING"
    activity_types: List[Activity] = [
       Activity[x.upper()] for x in config["choose_random_activity_type_from"]
    ]
    online_statuses: List[Status] = [
        Status[x.upper()] for x in config["choose_random_online_status_from"]
    ]

    online_status = random.choice(online_statuses)
    chosen_activity_type = random.choice(activity_types)
    url = None

    match chosen_activity_type:
        case Activity.GAME:
            name = config["game"]["name"]

        case Activity.STREAMING:
            name = config["streaming"]["name"]
            url = config["streaming"]["url"]

        case Activity.LISTENING:
            name = config["listening"]["name"]

        case Activity.WATCHING:
            name = config["watching"]["name"]

        case Activity.CUSTOM:
            name = config["custom"]["name"]

        case Activity.COMPETING:
            name = config["competing"]["name"]

    activity = Presence(online_status)
    activity.addActivity(activity_type=chosen_activity_type, name=name, url=url)

    State_AutoResponder.status = "LOADED"


    MainThread(config_default['DISCORD_AUTO_RESPONDER']['token'], activity)



if __name__ == "__main__":
    discord_auto_responder()